<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on Racksam</title>
    <link>https://www.racksam.com/tags/php/</link>
    <description>Recent content in php on Racksam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Jun 2017 19:00:18 +0000</lastBuildDate>
    
	<atom:link href="https://www.racksam.com/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CentOS 7 安装php7 &#43; MariaDB &#43; Nginx &#43; Wordpress</title>
      <link>https://www.racksam.com/2017/06/08/centos7-php7-nginx-mariadb-wordpress/</link>
      <pubDate>Thu, 08 Jun 2017 19:00:18 +0000</pubDate>
      
      <guid>https://www.racksam.com/2017/06/08/centos7-php7-nginx-mariadb-wordpress/</guid>
      <description>一、安装Fedora第三方源 安装Fedora第三方源 yum -y update yum -y install epel-release 修改epel为默认不启用 vi /etc/yum.repos.d/epel.repo 将[epel]部分的enabled=1修改成e</description>
    </item>
    
    <item>
      <title>CentOS6下搭建 Nginx &#43; PHP &#43; MySQL服务器</title>
      <link>https://www.racksam.com/2014/04/04/setting-nginx-php-fpm-mysql/</link>
      <pubDate>Fri, 04 Apr 2014 15:27:09 +0000</pubDate>
      
      <guid>https://www.racksam.com/2014/04/04/setting-nginx-php-fpm-mysql/</guid>
      <description>&lt;p&gt;Nginx+PHP-FPM的组合是目前生产环境中最主流的php网站的选择。&lt;/p&gt;
&lt;p&gt;PHP-FPM是一个PHP FastCGI进程管理器。对于熟悉Java的人来说，可以把php-fpm想象成php程序的容器，就像Tomcat是servlet的容器一样。网上对这种（前端静态web服务器+后端php-fpm）的组合技术有如下的描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;FastCGI是一个可伸缩的，高速地在web server和脚本语言间交互的接口。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;FastCGI的主要优点是把动态语言和web server分离开来。这种技术允许把web server和动态语言运行在不同的主机上，以大规模扩展和改进安全性而不损失生产效率。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;php-fpm可以和任何支持远端FastCGI的web server工作。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>根据客户端IP地址识别ISP</title>
      <link>https://www.racksam.com/2013/09/02/getting-client-isp-with-php/</link>
      <pubDate>Mon, 02 Sep 2013 10:39:07 +0000</pubDate>
      
      <guid>https://www.racksam.com/2013/09/02/getting-client-isp-with-php/</guid>
      <description>&lt;p&gt;PHP服务器端的程序，只要查询出客户端IP地址归属地以后，就可以在此基础上加以灵活应用。例如，针对来自不同的ISP的访问，返回不同的网页内容。或者根据用户所在的城市，跳转到该城市的地方网站。&lt;/p&gt;
&lt;p&gt;这里是一个简单的区分不同的ISP的小程序。节选部分代码：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>程序查询IP地址归属地的方法</title>
      <link>https://www.racksam.com/2013/09/01/getting-ip-location-with-php/</link>
      <pubDate>Sun, 01 Sep 2013 10:39:07 +0000</pubDate>
      
      <guid>https://www.racksam.com/2013/09/01/getting-ip-location-with-php/</guid>
      <description>&lt;p&gt;程序中查询一个IP地址的归属地信息，方法有很多种。概括起来有两类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调用某些网站提供的web api接口&lt;/p&gt;
&lt;p&gt;好处是显而易见的，使用便捷，开发成本低，自己不需要维护IP地址信息库。坏处也很明显，受制于人，服务说停就停。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自己编程，查询本地的IP地址信息库&lt;/p&gt;
&lt;p&gt;这种方式完全自主，使用起来没有任何限制。不过需要自己维护IP地址信息库，起码每年更新几次还是有必要的。国内最常用的IP地址信息库就是纯真IP地址信息库了。&lt;/p&gt;
&lt;p&gt;下载网站1：http://www.cz88.net 下载网站2：http://www.crsky.com/soft/2611.html&lt;/p&gt;
&lt;p&gt;需要注意的是，虽然php可以直接访问qqwry.dat文件进行查询，但是如果查询比较频繁的话，建议还是采用使用C编写成的qqwry.so这样的php扩展模块效率更高。在Linux下很容易进行安装。具体可以参照http://www.open-open.com/lib/view/open1334717267889.html&lt;/p&gt;
&lt;p&gt;还有一种做法是使用数据库维护一个IP地址信息库。难点主要是如果拿到一份正确的数据库（去淘宝上买？哪里有官方的？）以及从哪里获取IP信息的更新。&lt;/p&gt;
&lt;p&gt;对于小规模应用，最便捷的做法显然是调用新浪，淘宝等现成的接口。大不了把几个接口都写到程序里，一个接口失败了，就尝试调用另外一个接口，这样应该能大大增强程序的可靠性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>PHP获取客户端真实IP地址的方法</title>
      <link>https://www.racksam.com/2013/08/10/getting-client-real-ip-address-in-php-request/</link>
      <pubDate>Sat, 10 Aug 2013 10:06:57 +0000</pubDate>
      
      <guid>https://www.racksam.com/2013/08/10/getting-client-real-ip-address-in-php-request/</guid>
      <description>考虑到用户的浏览器访问网站可能会使用代理，服务器端的php代码必须使用多种判断，才能获取用户的真实IP地址。 &amp;lt;?php function getClientIp(){ $onlineip=&amp;#39;&amp;#39;; if(getenv(&amp;#39;HTTP_CLIENT_IP&amp;#39;)&amp;amp;&amp;amp;strcasecmp(getenv(&amp;#39;HTTP_CLIENT_IP&amp;#39;),&amp;#39;unknown&amp;#39;)){ $onlineip=getenv(&amp;#39;HTTP_CLIENT_IP&amp;#39;); }elseif(getenv(&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;)&amp;amp;&amp;amp;strcasecmp(getenv(&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;),&amp;#39;unknown&amp;#39;)){ $onlineip=getenv(&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;); }elseif(getenv(&amp;#39;REMOTE_ADDR&amp;#39;)&amp;amp;&amp;amp;strcasecmp(getenv(&amp;#39;REMOTE_ADDR&amp;#39;),&amp;#39;unknown&amp;#39;)){ $onlineip=getenv(&amp;#39;REMOTE_ADDR&amp;#39;); }elseif(isset($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;])&amp;amp;&amp;amp;$_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;]&amp;amp;&amp;amp;strcasecmp($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;],&amp;#39;unknown&amp;#39;)){ $onlineip=$_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;]; } return $onlineip; }</description>
    </item>
    
    <item>
      <title>php中如何判断一个IP地址是否属于某个网络地址段</title>
      <link>https://www.racksam.com/2013/08/09/good-php-script-to-judge-ip-range/</link>
      <pubDate>Fri, 09 Aug 2013 10:35:26 +0000</pubDate>
      
      <guid>https://www.racksam.com/2013/08/09/good-php-script-to-judge-ip-range/</guid>
      <description>这个问题困扰我很久了。很多人的做法是使用正则文字验证开头文字是否匹配。但是这种方式有很大的局限性，只能判断类似192.168.1.9是否属于</description>
    </item>
    
    <item>
      <title>PHP调用Linux Ping</title>
      <link>https://www.racksam.com/2013/08/06/using-ping-with-php/</link>
      <pubDate>Tue, 06 Aug 2013 10:06:57 +0000</pubDate>
      
      <guid>https://www.racksam.com/2013/08/06/using-ping-with-php/</guid>
      <description>PHP中实现网络ping的功能，可以直接调用操作系统的ping命令。例如在Linux下，可以这样实现： &amp;lt;?php // 参照ping命令的参数 exec(&amp;#34;ping -c 2 www.tudaxia.com&amp;#34;, $output, $result);</description>
    </item>
    
  </channel>
</rss>