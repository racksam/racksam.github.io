<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Racksam</title>
    <link>https://racksam.github.io/post/</link>
    <description>Recent content in Posts on Racksam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <lastBuildDate>Thu, 08 Jun 2017 19:00:18 +0000</lastBuildDate>
    
	<atom:link href="https://racksam.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CentOS 7 安装php7 &#43; MariaDB &#43; Nginx &#43; Wordpress</title>
      <link>https://racksam.github.io/2017/06/08/centos7-php7-nginx-mariadb-wordpress/</link>
      <pubDate>Thu, 08 Jun 2017 19:00:18 +0000</pubDate>
      
      <guid>https://racksam.github.io/2017/06/08/centos7-php7-nginx-mariadb-wordpress/</guid>
      <description>一、安装Fedora第三方源 安装Fedora第三方源 yum -y update yum -y install epel-release 修改epel为默认不启用 vi /etc/yum.repos.d/epel.repo 将[epel]部分的enabled=1修改成e</description>
    </item>
    
    <item>
      <title>CentOS7下使用Firewalld</title>
      <link>https://racksam.github.io/2017/05/02/centos7-firewalld-tips/</link>
      <pubDate>Tue, 02 May 2017 19:00:18 +0000</pubDate>
      
      <guid>https://racksam.github.io/2017/05/02/centos7-firewalld-tips/</guid>
      <description>从iptables转到firewalld需要一段时间去适应。慢慢学习吧。 为特定IP打开数据库访问端口： firewall-cmd --permanent --new-zone=mysql firewall-cmd --reload firewall-cmd --permanent --zone=mysql --set-target=ACCEPT firewall-cmd --permanent --zone=mysql --add-service=mysql firewall-cmd --permanent --zone=mysql --add-source=192.168.110.27/32 firewall-cmd --permanent</description>
    </item>
    
    <item>
      <title>从FreeRadius 2 迁移到 3</title>
      <link>https://racksam.github.io/2017/04/01/migration-of-freeradius-from-2-to-3/</link>
      <pubDate>Sat, 01 Apr 2017 15:00:18 +0000</pubDate>
      
      <guid>https://racksam.github.io/2017/04/01/migration-of-freeradius-from-2-to-3/</guid>
      <description>目前FreeRadius官方主推的是3.x版本，生产环境也推荐尽快升级到新版本。 数据库的差异与迁移 版本2与3的MySQL数据库定义大部分表是</description>
    </item>
    
    <item>
      <title>CentOS 7 安装FreeRadius</title>
      <link>https://racksam.github.io/2017/03/02/centos7-install-freeradius/</link>
      <pubDate>Thu, 02 Mar 2017 19:00:18 +0000</pubDate>
      
      <guid>https://racksam.github.io/2017/03/02/centos7-install-freeradius/</guid>
      <description>目前FreeRadius 2仍在大量被应用于生产环境，但官网推荐尽早采用版本3，并且宣布不再更新版本2。虽然版本2和3内部有很大的区别，但由于</description>
    </item>
    
    <item>
      <title>使用acme.sh脚本及DNS API方式申请及更新let&#39;s encrypt证书</title>
      <link>https://racksam.github.io/2016/12/26/centos-nginx-setup-lets-encrypt-with-acme-sh/</link>
      <pubDate>Mon, 26 Dec 2016 19:14:40 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/12/26/centos-nginx-setup-lets-encrypt-with-acme-sh/</guid>
      <description>&lt;p&gt;Linux服务器下使用acme.sh脚本是申请let&amp;rsquo;s encrypt证书最便捷的方式，比官方推荐的&lt;code&gt;certbot&lt;/code&gt;脚本工具要强大的多。&lt;/p&gt;

&lt;p&gt;安装文档：
&lt;a href=&#34;https://github.com/Neilpang/acme.sh/wiki/说明&#34;&gt;https://github.com/Neilpang/acme.sh/wiki/说明&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;前提条件&#34;&gt;前提条件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;拥有一个域名，例如mydomain.com (在国内主机的用的话，还需要通过ICP备案)&lt;/li&gt;
&lt;li&gt;确定二级域名，并且在域名服务器创建一条A记录，执行云主机的公网IP地址。www.mydomain.com指向xxx.xxx.xxx.xxx的IP地址&lt;/li&gt;
&lt;li&gt;要等到新创建的域名解析能在公网上被解析到。&lt;/li&gt;
&lt;li&gt;据说国内的域名提供商对letsencrypt的支持非常差，但是现阶段用dnspod解析的域名还没碰到问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;一-安装acme-sh脚本&#34;&gt;一、安装acme.sh脚本&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl  https://get.acme.sh | sh

# 重新登录ssh，或者使用source命令重新加载环境变量
source . 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS 7 安装最新版PostgreSQL</title>
      <link>https://racksam.github.io/2016/12/19/centos7-install-postgresql/</link>
      <pubDate>Mon, 19 Dec 2016 21:00:18 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/12/19/centos7-install-postgresql/</guid>
      <description>&lt;p&gt;以下操作均在root账号下操作.&lt;/p&gt;

&lt;h2 id=&#34;一-安装&#34;&gt;一、安装&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看本机CentOS的版本: &lt;code&gt;cat /etc/redhat-release&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看最新版本的postgresql yum源&lt;/p&gt;

&lt;p&gt;在PostgreSQL官方的yum找到最新稳定版的yum源，复制rpm的链接。当前的最新版本为9.6。&lt;a href=&#34;https://yum.postgresql.org/&#34;&gt;https://yum.postgresql.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;导入yum源文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpm -ivh https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过yum安装最新版的postgresql&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yum -y install postgresql96*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装后的目录在&lt;code&gt;/usr/pgsql-9.6/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSH免密码登录Linux服务器</title>
      <link>https://racksam.github.io/2016/12/19/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 19 Dec 2016 21:00:18 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/12/19/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>一、如果本地没有创建ssh的秘钥对，则第一步需要先创建本地主机的ssh秘钥对 Linux或者MacOS可以直接用ssh-keygen命令在本地</description>
    </item>
    
    <item>
      <title>阿里云主机安装Shadowsocks客户端 &#43; proxychains4</title>
      <link>https://racksam.github.io/2016/12/19/aliyun-centos7-install-ss-client/</link>
      <pubDate>Mon, 19 Dec 2016 21:00:18 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/12/19/aliyun-centos7-install-ss-client/</guid>
      <description>&lt;p&gt;对于技术人员PC端上科学上网可以选择的手段太多了，但是如果在国内的VPS服务器科学上网并不那么容易。这里简单介绍服务器上安装Shadowsocks客户端 + proxychains4的方法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>阿里云主机安装最新版rbenv&#43;ruby&#43;rails</title>
      <link>https://racksam.github.io/2016/12/19/aliyun-centos7-install-rbenv-ruby-rails/</link>
      <pubDate>Mon, 19 Dec 2016 21:00:18 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/12/19/aliyun-centos7-install-rbenv-ruby-rails/</guid>
      <description>&lt;h2 id=&#34;一-安装编译环境-root账号下&#34;&gt;一、安装编译环境【root账号下】&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用yum工具安装必要的编译环境&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yum update -y
yum install -y git bzip2 openssl-devel readline-devel zlib-devel sqlite sqlite-devel gcc-c++
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建发布用的ruby账号,例如: deploy&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;useradd deploy -G wheel
passwd deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;为了使用sudo命令，需要将用户添加到wheel组去。对于已经创建的用户，可以使用以下命令添加用户的组&lt;/em&gt;
&lt;code&gt;usermod -a -G wheel deploy&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>阿里云主机CentOS7配置rails服务器的葵花宝典</title>
      <link>https://racksam.github.io/2016/12/19/install-rbenv-ruby-rails-puma-ngnix-on-aiyun-centos7/</link>
      <pubDate>Mon, 19 Dec 2016 13:31:41 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/12/19/install-rbenv-ruby-rails-puma-ngnix-on-aiyun-centos7/</guid>
      <description>&lt;p&gt;以本地为macos为例
服务器端为CentOS7.3 64位
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>阿里云主机CentOS 7下编译安装ngrok</title>
      <link>https://racksam.github.io/2016/12/18/aliyun-centos7-install-ngrok/</link>
      <pubDate>Sun, 18 Dec 2016 15:11:59 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/12/18/aliyun-centos7-install-ngrok/</guid>
      <description>&lt;p&gt;ngrok等隧道工具是Web程序员开发的神器！&lt;/p&gt;

&lt;p&gt;配置微信及支付宝等接口，需要回调自己的公网服务器地址。开发过程中程序是跑在程序员自己的电脑上的，如果想在开发过程中调试接口的请求，必须想办法将本地应用穿透到公网上去，才能让微信或支付宝的服务器能访问到。&lt;/p&gt;

&lt;p&gt;传统的硬派做法是在路由器上做端口映射，极其不便。有了ngrok这个神器，程序员可以很方便的将自己的应用临时公开在公网地上，然后在自己的电脑上观察和调试来自外界的访问。&lt;/p&gt;

&lt;p&gt;ngrok的开源版本可以从github上获得。开源版本是老版本，该神器的作者已不再维护老版本，而将精力放在在线商业服务&lt;a href=&#34;https://ngrok.com&#34;&gt;ngrok.com&lt;/a&gt;上了。选择使用ngrok的在线服务，免掉了自己搭建服务器的辛苦，还有确保用到最新的ngrok软件，安全性比较高。理论上选择这种云隧道服务是最便捷的方式，但是在国内使用公开的云隧道，有以下几个明显的问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;由于“你懂得”的存在，ngrok.com在国内的访问不稳定，时不时会访问不到。&lt;/li&gt;
&lt;li&gt;微信及支付宝的接口在对接时，需要审查接口地址的域名是否ICP备案，是否是签约域名等，这就限制了无法随意使用一个第三方的域名地址做隧道的公网地址。&lt;/li&gt;
&lt;li&gt;微信或者支付宝平台很容易封杀一些用户量比较大的隧道提供商的域名。&lt;/li&gt;
&lt;li&gt;如果选择一些不知名的第三方隧道提供者，很难确保信息不会恶意截获。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因此我的观点是如果是国内开发团队的话，一定要搭建一个自己的隧道服务器。ngrok的开源版本(老版本)虽然据作者说存在安全隐患，但是如果仅作为调试用的话应该问题不大吧。期待作者能将最新版也开源化。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL &#43; SCWS &#43; zhparser &#43; Rails4 &#43; pg_search 实现中文全文检索</title>
      <link>https://racksam.github.io/2016/05/03/chinese-full-text-searching-with-postgresql-zhparser-and-rails/</link>
      <pubDate>Tue, 03 May 2016 09:02:30 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/05/03/chinese-full-text-searching-with-postgresql-zhparser-and-rails/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言：&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;全文搜索的实现方式&lt;/p&gt;

&lt;p&gt;Web项目中如果要实现全文检索，最主流的做法是Web项目以外配置一个独立的搜索引擎，然后web程序通过API接口调用这些搜索引擎，实现建立索引以及搜索全文。目前常用的几个开源搜索引擎：&lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;、&lt;a href=&#34;https://lucene.apache.org/solr/&#34;&gt;Solr&lt;/a&gt;、&lt;a href=&#34;http://sphinxsearch.com/&#34;&gt;sphinx&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;云服务大行其道的今天，当然也少不了调用云服务类型搜索引擎。使用有实力的云搜索引擎服务，应该也是一个不错的选择。例如：&lt;a href=&#34;http://aws.amazon.com/cloudsearch/&#34;&gt;Amazon CloudSearch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;还有一种简易做法是直接调用谷歌或者百度的索引结果。（使用&lt;code&gt;site=mydomain&lt;/code&gt;，将搜索结果限制在自己的网站域名中）。这种比较适用于实时性要求不高的文章类网站，使用情景有限。&lt;/p&gt;

&lt;p&gt;最后一种是原始的数据库查询方式&lt;code&gt;like &#39;%keywords%&#39;&lt;/code&gt;。这种方式对于text文章类的字段来说效率低下，一般不要考虑用来做全文检索。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;中文的全文搜索&lt;/p&gt;

&lt;p&gt;英文、西班牙文等这些字母语言，对于实现全文搜索来说有一个巨大的先天优势：人家不用去考虑&lt;strong&gt;分词&lt;/strong&gt;的问题。英文文章中的单词本来就是用空格及标点符号分隔的。但是像中文和日文这种，一句话中所有的字符都是沾在一起的情况，要实现全文检索，首先要做到的是能够正确地将一句话正确拆分成词语。要达到这个目的，一是需要一个高效的分词处理算法，二是需要一个尽可能包含所有词语的词典。由于语言的进化，这个词典还需要随着时代不停的去更新。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;一-为什么选择postgresql进行全文搜索&#34;&gt;一、为什么选择PostgreSQL进行全文搜索&lt;/h2&gt;

&lt;p&gt;在用Rails4+PostgreSQL开发一个公司内部使用小系统时，对于全文搜索功能的实现让我陷入了选择的泥坑。&lt;/p&gt;

&lt;p&gt;首先，配置一个Solr这样的第三方搜索引擎，看来是全文检索(主要是中文)的不二之选。但是我实在不甘心为了一个只有几千篇文章、用户数只有几百人的内部Web应用、让系统变得复杂化。这时候，这篇文章《&lt;a href=&#34;http://rachbelaid.com/postgres-full-text-search-is-good-enough/&#34;&gt;Postgres full-text search is Good Enough!&lt;/a&gt;》映入了我的眼帘。看起来PostgreSQL数据库在全文搜索方面的性能足以满足小规模系统的需求了。另外，&lt;a href=&#34;https://github.com/Casecommons/pg_search&#34;&gt;pg_search&lt;/a&gt;模块，为Rails应用提供了调用PostgreSQL搜索功能的优秀接口。如此看来，PostgreSQL+Rails4+pg_search能实现我的全文搜索功能。&lt;/p&gt;

&lt;p&gt;但是经过一番测试，我发现这个方案默认只会对英语等那些字母语言有用，没有办法对中文进行全文检索。重新审视这个解决方案，原来我忘记了一个重要环节：那就是PostgreSQL默认没有中文分词功能。&lt;/p&gt;

&lt;p&gt;通过网上的查找，发现了很多人都推荐的一个中文分词解决方案：&lt;a href=&#34;http://www.xunsearch.com/scws&#34;&gt;SCWS&lt;/a&gt;，以及实现调用这个分词引擎的PostgreSQL的扩展插件：&lt;a href=&#34;http://pgxn.org/dist/zhparser/&#34;&gt;zhparser&lt;/a&gt;。经过反复测试，终于实现了Rails4+pg_search来进行中文全文检索。&lt;/p&gt;

&lt;p&gt;以下是CentOS6下SCWS+zhparser+rails4+pg_search+PostgreSQL的安装配置和开发的要点总结。另外，我也提供了一个完整的样例代码，以供参考&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS6下最新版PostgreSQL的安装及设置</title>
      <link>https://racksam.github.io/2016/04/02/install-postgresql9-with-yum-on-centos6/</link>
      <pubDate>Sat, 02 Apr 2016 16:46:37 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/04/02/install-postgresql9-with-yum-on-centos6/</guid>
      <description>&lt;p&gt;CentOS默认Yum源安装的PostgreSQL版本仍然停留在8.x。如果不想手工编译，又想安装使用最新版的PostgreSQL的话，可以通过引用PostgreSQL官方的Yum源进行安装。&lt;/p&gt;

&lt;h2 id=&#34;一-安装postgresql&#34;&gt;一、安装PostgreSQL&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在CentOS默认的Yum源文件里屏蔽对PostgreSQL的获取&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/yum.repos.d/CentOS-Base.repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在[base]以及[updates] 部分的最下方，各增加一行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exclude=postgresql*
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails 4 &#43; carrierwave &#43; Ajax &#43; BootStrap Modal弹出窗口下的文件上传</title>
      <link>https://racksam.github.io/2016/03/12/upload-file-with-rails-and-ajax/</link>
      <pubDate>Sat, 12 Mar 2016 20:21:04 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/03/12/upload-file-with-rails-and-ajax/</guid>
      <description>&lt;p&gt;&lt;em&gt;从PHP开发转到Rails学习已经快两个月了，对Rails简直是相见恨晚！不过，Rails框架的很多的魔术用法再加上devise等各种大神级的gem，对初学者却是一把双刃剑：好处就不用多说了，坏处就是很多功能的内部实现原理不明白，一旦碰到小问题，不知道该如何下手。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;为了学习Rails，给做代购的朋友做了一个商品管理小系统。有一个页面使用了Modal窗口+Ajax方式实现公司的“新增”和“修改”。其中表单里面有logo的文件上传功能，服务器端采用的是carrierwave处理文件上传。在使用脚手架创建的页面上测试时，图片上传等都没问题，但是改为ajax方式以后，发现只要有文件上传，就会提示找不到模板（这时候已经改成xxx.js.erb方式了）。而如果不选择文件的话，只填写其它字段的话ajax表单是没有问题。&lt;/p&gt;

&lt;p&gt;去Google上搜了一下，发现很多人都碰到过这个问题。有人推荐了remotipart这个gem，安装以后，发现真的解决了这个问题。
&lt;a href=&#34;https://os.alfajango.com/remotipart/&#34;&gt;https://os.alfajango.com/remotipart/&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Centos6 下安装rbenv &#43; ruby &#43; rails &#43; puma &#43; ngnix</title>
      <link>https://racksam.github.io/2016/03/01/install-rbenv-ruby-rails-nginx-puma-on-centos6/</link>
      <pubDate>Tue, 01 Mar 2016 21:08:16 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/03/01/install-rbenv-ruby-rails-nginx-puma-on-centos6/</guid>
      <description>&lt;p&gt;Rails项目在生产环境上线时，可以选择的ruby服务器比较多，例如：Rainbows、Unicorn、Passenger、Puma。其中Puma是近年来口碑比较不错的一个。&lt;/p&gt;

&lt;p&gt;这里总结整理CentOS6环境下安装配置rbenv、Ruby 2.3、rails 4、puma以及ngnix的集成环境。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如梦初醒：尽快转型成为一名Web全栈工程师</title>
      <link>https://racksam.github.io/2016/02/18/to-be-a-modern-web-developer/</link>
      <pubDate>Thu, 18 Feb 2016 20:08:24 +0000</pubDate>
      
      <guid>https://racksam.github.io/2016/02/18/to-be-a-modern-web-developer/</guid>
      <description>&lt;p&gt;最近10年，Web软件的设计思想和开发技术都发生了巨大的变化。特别是iPhone等智能手机成为移动端的主流以后，传统的浏览器-网站这种BS架构，逐渐演变成前后端分离的架构。后端将展示功能剥离出去，按照json以及RESTful接口规范，统一提供数据给APP、Web网页，HTML5网页前端。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://racksam.github.io/attachments/to-be-a-modern-web-developer/logos.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这几年PHP、Java、Python、Ruby等语言的各种Web开发框架层出不穷。与过去的一种框架提供完整的技术实现不同，现代的框架都放弃了所有的轮子都自己开发的做法，转为主动吸纳优秀的开源模块。框架本身慢慢演变成各种开源模块的集成方案。连Web软件最主流的php语言，也开始使用composer这一模块管理工具，大量引用Github上面的优秀资源。这方面最典型的PHP框架代表就是Laravel框架。&lt;/p&gt;

&lt;p&gt;与此同时，Web UI相关的技术也有了突飞猛进的发展。UI也已经走向框架化。自从Bootstrap引领了网页响应式布局的潮流以后，Material、Foundation等各种UI框架前仆后继。另外，jQuery的持续发展以及Angular等新JavaScript框架的发展，也极大提升了单页面应用（SPA）的开发效率和性能。这些前端框架的出现，以及互联网上大量免费的网页模板，使得后端的程序员能够在一些UI标准化比较高的Web项目中摆脱对专业美工设计以及前端工程师的依赖，短时间内就能开发出来外观看起来比较专业网站。&lt;/p&gt;

&lt;p&gt;作为在传统公司中工作多年的Java开发人员，尤其是开发商用系统的Java程序员，由于工作中很少用到这么多新的技术，很容易忽视对这些新技术的学习和运用。再加上国内封闭的网络环境，以及英语的语言障碍，可以说很多在商业软件公司工作的Java程序员正在被新技术边缘化。&lt;/p&gt;

&lt;p&gt;总结自己这些年各种失败的教训和感悟，对于学习新技术新知识来说，其实最大的阻力还是来自于自身的懒惰。针对和我一样思维还停留在5年前，甚至10年前的软件技术人员，真心建议尽快对自己来一次彻底的转变。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac OS下安装cordova开发编译环境</title>
      <link>https://racksam.github.io/2014/11/04/install-cordova-on-mac-os/</link>
      <pubDate>Tue, 04 Nov 2014 21:58:11 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/11/04/install-cordova-on-mac-os/</guid>
      <description>&lt;p&gt;PhoneGap/cordova为代表的基于HTML5开发iOS/Android应用的技术，大大降低了手机App的开发门槛。虽然目前与原生的Object-C/Java开发的应用在性能上还有差距，但是对于一些网站客户端类的APP来说已经足够实用了。另外随着技术的进步，未来HTML5也许成为开发app的主流技术。&lt;/p&gt;

&lt;p&gt;将html5打包成ios app，既可以选择appcan, build.phonegap.com这类的在线编译工具，也可以自己配置本地的xcode开发环境。虽然配置本地环境比较繁琐，但是灵活性更大，不会受制于人（很多在线打包网站，免费的服务有很多限制）。简单整理一下配置一个ios项目的步骤。&lt;/p&gt;

&lt;p&gt;※很多人使用黑苹果作为ios的开发环境，不过不建议这样做。将时间耗费在研究黑苹果上没什么意义。*
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OS X PackageMaker工具的下载位置</title>
      <link>https://racksam.github.io/2014/10/15/install-macos-packagemaker/</link>
      <pubDate>Wed, 15 Oct 2014 21:51:00 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/10/15/install-macos-packagemaker/</guid>
      <description>PackageMaker是苹果OS X系统上非常有用的安装程序打包器，用它可以轻松生成自己的pkg安装包。 真不知道苹果是怎么想的，Packag</description>
    </item>
    
    <item>
      <title>根据拍照时间批量修改照片文件名的Python脚本</title>
      <link>https://racksam.github.io/2014/05/14/python-script-to-change-pictures-filenames/</link>
      <pubDate>Wed, 14 May 2014 21:51:00 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/05/14/python-script-to-change-pictures-filenames/</guid>
      <description>&lt;p&gt;辛辛苦苦把电脑里好几年的照片上传到云盘以后，发现在云盘里照片文件的创建时间都变成了存入云盘的时间。另外，云盘网页上也无法看到照片的拍照时间（EXIF属性），整理照片时特别不方便。&lt;/p&gt;

&lt;p&gt;考虑到多数照片的文件名是由相机自动生成的，例如：IMG_3153.JPG。这样的文件名其实对我们也没有什么实际用处，不如干脆将文件名修改为拍照时间。这样的话，即使照片上传到云盘，也能够很方便的判断照片的时间。&lt;/p&gt;

&lt;p&gt;使用Python写了以下脚本，在Mac OS X下验证通过，处理速度非常快。
&lt;em&gt;注：由于拍照时间可以精确到秒，所以这个脚本产生的重名文件名的概率应该是很低的。&lt;/em&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OS X 锁屏幕的快捷键</title>
      <link>https://racksam.github.io/2014/05/13/mac-shortcuts-for-locking-screen/</link>
      <pubDate>Tue, 13 May 2014 21:44:28 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/05/13/mac-shortcuts-for-locking-screen/</guid>
      <description>Mac OS X下锁住屏幕的快捷键： ⌃ + ⇧ + ⏏ (Control + Shift + Eject) 其它的一些快捷键： http://support.apple.com/kb/ht1343</description>
    </item>
    
    <item>
      <title>Macbook Pro 2012 更换SSD硬盘的奋斗记</title>
      <link>https://racksam.github.io/2014/05/12/replace-ssd-for-macpro2012/</link>
      <pubDate>Mon, 12 May 2014 21:39:20 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/05/12/replace-ssd-for-macpro2012/</guid>
      <description>&lt;p&gt;我的MBP (13-inch, Mid 2012,  Model: A1278，港行)，由于安装的软件太多变得越来越慢。最终决定干脆更换SSD硬盘，重装安装系统。没想到新买的SSD硬盘折腾了我好几天。&lt;/p&gt;

&lt;p&gt;根据很多国内网站的评测以及一些国外网站上的MBP更换SSD的介绍，直接就在京东上选购了“三星840 Pro系列 256G 2.5英寸 SATA3固态硬盘”。三星840pro系列的价格明显高于同等容量的其它品牌，外表做工以及包装确实也不错。开始的时候用usb外置方式给新硬盘安装了Mavericks系统，启动和使用都没有问题。可是等安装到sata盘位，发现启动不起来，启动后屏幕上的灰色小圆圈一直在转。&lt;/p&gt;

&lt;p&gt;怀疑是用USB外置方式安装的问题。于是就用USB外置方式启动原装的硬盘上的恢复分区，然后用磁盘工具对内置的三星SSD进行抹去和分区。节外生枝的是抹去和分区时候都报失败，SSD硬盘下莫名其妙地自动出现一个disk0S2的神秘分区，怎么也删除不掉。只好把SSD拿下来接上USB转接线，在Windows下使用diskpart命令行工具，将该硬盘做了初始化。最后又把SSD放回苹果笔记本的硬盘盘位，使用原装硬盘的恢复分区引导进行网络安装。安装过程大概耗费了2个半小时，安装过程没什么问题，重启后发现依然不能启动SATA盘位上的SSD硬盘，晕倒。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://racksam.github.io/attachments/replace-ssd-for-macpro2012/ssd_boot_error.png.jpg&#34; alt=&#34;MBP无法识别SSD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;思考半天，猜想也许是三星840 pro系列的SSD太新了，配不上两年前的笔记本？于是联系京东办理了退货。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQLdb Python封装类</title>
      <link>https://racksam.github.io/2014/04/09/diy-python-mysql-class/</link>
      <pubDate>Wed, 09 Apr 2014 21:35:20 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/04/09/diy-python-mysql-class/</guid>
      <description>&lt;p&gt;我一直没弄明白一件事情，Python语言已经这么流行和成熟了，为什么使用MySQL的方式却如此原始。Python 2下大家推崇的依旧是使用MySQLdb这个第三方的模块，而其使用方式还是手写方法，没有一个比较权威的封装类。或许是我孤陋寡闻？&lt;/p&gt;

&lt;p&gt;根据官方文档及一些网上的样例，兔哥整理了一个MySQLdb的封装类。基本上涵盖了常用的函数，一般开发应该够用了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>电脑清除DNS缓存的方法</title>
      <link>https://racksam.github.io/2014/04/09/clear-dns-cache-in-pc/</link>
      <pubDate>Wed, 09 Apr 2014 21:30:01 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/04/09/clear-dns-cache-in-pc/</guid>
      <description>&lt;p&gt;MacOS及Windows不同版本下清除DNS缓存的方法不同。&lt;/p&gt;

&lt;h3 id=&#34;mac-os-x-10-5-10-6&#34;&gt;Mac OS X 10.5, 10.6+&lt;/h3&gt;

&lt;p&gt;终端窗口下执行以下命令：&lt;code&gt;#sudo dscacheutil -flushcache&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;mac-os-x-10-7-10-8-10-9&#34;&gt;Mac OS X 10.7, 10.8, 10.9&lt;/h3&gt;

&lt;p&gt;终端窗口下执行以下命令：&lt;code&gt;#sudo killall -HUP mDNSResponder&lt;/code&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个Linux通用iptables脚本</title>
      <link>https://racksam.github.io/2014/04/08/iptables-script-for-web-service/</link>
      <pubDate>Tue, 08 Apr 2014 20:56:47 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/04/08/iptables-script-for-web-service/</guid>
      <description>&lt;p&gt;最近为了上线一些Web服务器，整理了一个iptables的脚本。主要功能有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可以指定只有可信任主机及网段才能访问特定管理端口&lt;/li&gt;
&lt;li&gt;可以防止几种常见的Dos攻击&lt;/li&gt;
&lt;li&gt;非常容易修改和二次开发&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;样例代码：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下安装protobuf python版本</title>
      <link>https://racksam.github.io/2014/04/06/protocol-buffers-in-python/</link>
      <pubDate>Sun, 06 Apr 2014 17:08:10 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/04/06/protocol-buffers-in-python/</guid>
      <description>&lt;h2 id=&#34;protobuf简介-google发明的一种全新的数据交换格式&#34;&gt;protobuf简介：Google发明的一种全新的数据交换格式&lt;/h2&gt;

&lt;p&gt;当前分布式Web系统之间交换数据的所用数据格式的类型中，最常见的依然是json与XML。不过Google的技术大牛们认为json/XML这些文本类型的数据格式传输效率太差，于是他们发明了一种全新的数据格式：&lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;https://github.com/google/protobuf&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;protobuf是一种序列化结构数据（serializing structured data）。数据在保存及传输过程中以二进制编码形态存在，相对于文本格式的数据形式，大大提高了效率。同时，由于protobuf的数据中不携带数据结构定义的信息（Schema以及类似xml中标签名称），又进一步减少了数据里的冗余信息。&lt;/p&gt;

&lt;p&gt;据统计，一条消息数据，用protobuf序列化后的数据大小是json的10分之一，xml格式的20分之一，是传统的二进制序列化的10分之一，所以protobuf的性能优势还是很明显的。事实上这种技术早已在Google的服务中大量被应用。另外，Google也将此技术开源化来促进推广。&lt;/p&gt;

&lt;p&gt;对于一般的开发者来说，有可能需要用到protobuf的情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对接Google的某种服务，例如开发DSP广告系统，需要对接Google的广告RTB交易平台。&lt;/li&gt;
&lt;li&gt;在分布式Web系统之间交换数据时，对传输效率有非常高的要求。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;官方目前多种编程语言的实现: C++、Java、Python、Objective-C、JavaScript、Ruby、Go。暂时没有PHP版本。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx上安装phpMyAdmin</title>
      <link>https://racksam.github.io/2014/04/05/how-to-install-phpmyadmin-on-nginx/</link>
      <pubDate>Sat, 05 Apr 2014 17:23:26 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/04/05/how-to-install-phpmyadmin-on-nginx/</guid>
      <description>&lt;p&gt;前提：首先要完成安装 &lt;a href=&#34;https://racksam.github.io/2014/04/04/setting-nginx-php-fpm-mysql/&#34;&gt;nginx+php+php-fpm+mysql&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-准备工作&#34;&gt;一、 准备工作：&lt;/h2&gt;

&lt;h3 id=&#34;1-如果mysql的root账号为空-需要设置root密码&#34;&gt;1. 如果mysql的root账号为空，需要设置root密码&lt;/h3&gt;

&lt;p&gt;CentOS下默认安装的mysql服务器，里面的root账号默认密码为空，首先为root设置一个密码&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#mysqladmin -u root password yourpassword&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注： 虽然通过一些特殊配置，可以使phpmyadmin允许空密码登录，但是不推荐这样做，尤其是公网的服务器。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-设置php-ini正确配置-session-save-path&#34;&gt;2. 设置php.ini正确配置&lt;code&gt;session.save_path&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先检查php.ini配置文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#grep session.save_path /etc/php.ini&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果不存在以下设置，增加该配置。如果被注释了话，去掉注释
session.save_path = “/var/lib/php/session”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看该目录是否存在：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#ls /var/lib/php/session&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果不存在，则手工创建&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#mkdir /var/lib/php/session&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改目录属主为nginx&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chown nginx:nginx session/ -R&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;重启启动php-fpm&lt;/p&gt;

&lt;p&gt;&lt;code&gt;service php-fpm restart&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下安装 Nginx &#43; uwsgi &#43; web.py &#43; MySQLdb</title>
      <link>https://racksam.github.io/2014/04/05/setting-nginx-uwsgi-webpy-mysqldb/</link>
      <pubDate>Sat, 05 Apr 2014 15:27:09 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/04/05/setting-nginx-uwsgi-webpy-mysqldb/</guid>
      <description>&lt;p&gt;Web服务器上有多种方式运行Python：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;传统上的CGI方式：基本已被淘汰&lt;/li&gt;
&lt;li&gt;mod_python的模块方式：仍在广泛使用，但生产环境中也被逐步淘汰&lt;/li&gt;
&lt;li&gt;uwsgi方式：目前生产环境下最受推崇的方式，尤其是Nginx+uwsgi服务器组合是上线的首选。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python与Web服务器的关系基本上和PHP与Web服务器的关系类似，可以参考该文：&lt;a href=&#34;https://racksam.github.io/2014/04/04/setting-nginx-php-fpm-mysql/&#34;&gt;CentOS6下搭建 Nginx + PHP + MySQL服务器&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;uwsgi服务器的作用类似于java里面的Tomcat服务器。至于在上面跑什么样的Python程序那可能性就太多了。例如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;按照uwsgi的规范直接编写的python代码&lt;/li&gt;
&lt;li&gt;Django编写的应用（重量级Web框架）&lt;/li&gt;
&lt;li&gt;Flask编写的应用（轻量级Web框架）&lt;/li&gt;
&lt;li&gt;web2py编写的应用（轻量级Web框架）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python下的Web框架种类非常多，很难说孰好孰坏。应该说没有最好的，只有最合适的。一个比较实用的选择原则是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果是开发一个简单的web应用的话，推荐使用轻量级的。&lt;/li&gt;
&lt;li&gt;如果是开发一个复杂的网站，Django可以提供很多成熟的模块，开发效率会非常高。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里选择web.py框架作为例子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS6下搭建 Nginx &#43; PHP &#43; MySQL服务器</title>
      <link>https://racksam.github.io/2014/04/04/setting-nginx-php-fpm-mysql/</link>
      <pubDate>Fri, 04 Apr 2014 15:27:09 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/04/04/setting-nginx-php-fpm-mysql/</guid>
      <description>&lt;p&gt;Nginx+PHP-FPM的组合是目前生产环境中最主流的php网站的选择。&lt;/p&gt;

&lt;p&gt;PHP-FPM是一个PHP FastCGI进程管理器。对于熟悉Java的人来说，可以把php-fpm想象成php程序的容器，就像Tomcat是servlet的容器一样。网上对这种（前端静态web服务器+后端php-fpm）的组合技术有如下的描述：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;FastCGI是一个可伸缩的，高速地在web server和脚本语言间交互的接口。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;FastCGI的主要优点是把动态语言和web server分离开来。这种技术允许把web server和动态语言运行在不同的主机上，以大规模扩展和改进安全性而不损失生产效率。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;php-fpm可以和任何支持远端FastCGI的web server工作。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS下编译安装Python2.7</title>
      <link>https://racksam.github.io/2014/04/03/installing-python-2-7-on-centos-6/</link>
      <pubDate>Thu, 03 Apr 2014 15:17:40 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/04/03/installing-python-2-7-on-centos-6/</guid>
      <description>&lt;p&gt;CentOS 6自带的python版本仍然是2.6.x。
如果需要安装python2.7版本，推荐的方法还是传统的编译安装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>强制浏览器刷新网站的favicon.ico</title>
      <link>https://racksam.github.io/2014/03/26/how-to-force-refresh-favicon-ico/</link>
      <pubDate>Wed, 26 Mar 2014 15:11:46 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/03/26/how-to-force-refresh-favicon-ico/</guid>
      <description>网站更新了favicon.ico以后，很多浏览器里都无法立刻刷新。特别是Firefox，Chrome之类的浏览器，有时候即使清空缓存并重启以</description>
    </item>
    
    <item>
      <title>屏蔽Baidu等搜索引擎的爬虫</title>
      <link>https://racksam.github.io/2014/02/01/how-to-disable-searching-spider/</link>
      <pubDate>Sat, 01 Feb 2014 10:59:22 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/02/01/how-to-disable-searching-spider/</guid>
      <description>&lt;p&gt;正当我为SEO忧心重重的时候，有朋友竟然问我如何做到禁止Baidu等爬虫来收录网站，也就是说反SEO。真是林子大了什么鸟都有啊~&lt;/p&gt;

&lt;p&gt;最简单的手段主要是通过robots.txt以及.htaccess文件，来禁止某些spider的User-Agent标识。当然前提是这些Spider都是正规的搜索引擎，不会耍流氓去伪装别的User-Agent标识。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;※对付那些经常伪装User-Agent的恶意爬虫，这些正规套路并不管用，一般需要采用封堵IP地址等更严厉的办法。&lt;/em&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php访问gmail imap邮箱 (完美显示中文目录名与邮件)</title>
      <link>https://racksam.github.io/2014/01/01/php-fetch-gmail/</link>
      <pubDate>Wed, 01 Jan 2014 10:59:22 +0000</pubDate>
      
      <guid>https://racksam.github.io/2014/01/01/php-fetch-gmail/</guid>
      <description>&lt;p&gt;根据官方文档以及一些网友的分享，整理编写了IMAP方式访问Gmail邮箱的代码。经过反复测试和调整，中文目录名称显示的问题也终于得到了解决。 &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用squid做网站的反向代理服务器</title>
      <link>https://racksam.github.io/2013/09/28/squid-reverse-proxy/</link>
      <pubDate>Sat, 28 Sep 2013 10:59:22 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/09/28/squid-reverse-proxy/</guid>
      <description>&lt;p&gt;Squid就是Web服务器的大神。Squid的用途和用法实在是太丰富了。可以说如果有Squid做不到的，那一定是自己不会用而已。&lt;/p&gt;

&lt;p&gt;草根站长们也许会碰到这样的某国特色的遭遇：由于自己的疏忽忘了提前重新备案，网站的ICP备案失效了。接着麻烦就来了：IDC机房根据某些政策将该域名劫持到了一个警示页面，提示该网站在备案重新完成之前无法访问。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>国内常见的广告管理系统</title>
      <link>https://racksam.github.io/2013/09/10/some-dsp-cases-in-china/</link>
      <pubDate>Tue, 10 Sep 2013 10:59:22 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/09/10/some-dsp-cases-in-china/</guid>
      <description>&lt;p&gt;网络广告的直接参与者主要是三方：广告主，广告发行者（网站等平台提供商）和受众。广告管理系统是广告业务自动化的最重要的支撑。&lt;/p&gt;

&lt;h2 id=&#34;一-专业的广告管理系统&#34;&gt;一、专业的广告管理系统&lt;/h2&gt;

&lt;p&gt;广告管理系统基本上可以分为两大类，一类是面向广告主(Advertisers)以及代理商（Agencies）的，另一类是面向广告发行者(Publishers)的，例如某门户网站。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;面向网站运营商(Publishers)的广告管理系统：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;</description>
    </item>
    
    <item>
      <title>关于网络广告DSP的一些文章链接</title>
      <link>https://racksam.github.io/2013/09/09/some-resource-of-dsp-and-rtb/</link>
      <pubDate>Mon, 09 Sep 2013 10:59:22 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/09/09/some-resource-of-dsp-and-rtb/</guid>
      <description>广告的完美境界显然应该是广告的精准投放，即在恰当的时间将恰当的内容展示给恰当的受众。只有这样才能让广告主，发布商和广告受众这三方均获得最满意</description>
    </item>
    
    <item>
      <title>手机定位技术分析</title>
      <link>https://racksam.github.io/2013/09/03/mobile-location-technology/</link>
      <pubDate>Tue, 03 Sep 2013 10:39:07 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/09/03/mobile-location-technology/</guid>
      <description>&lt;p&gt;Android，iPhone等智能手机上的定位技术是一大亮点，实用性非常高。无数基于位置的服务(Location Based Service，简称LBS)应用都建立在该技术的基础上，尤其是地图类应用。&lt;/p&gt;

&lt;p&gt;一说起手机定位，大家首先会想到是GPS。最近在网上搜集整理一下，发现手机定位远不止GPS这么单纯。事实上目前智能机上使用了至少3种定位技术：基于移动网络基站的低精度定位，基于美国GPS卫星信号的定位，还有就是基于WiFi资料库的定位。（还有一种叫A-GPS的方式，是复合应用了两种技术：既基于移动网的基站，也使用GPS卫星信号）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>根据客户端IP地址识别ISP</title>
      <link>https://racksam.github.io/2013/09/02/getting-client-isp-with-php/</link>
      <pubDate>Mon, 02 Sep 2013 10:39:07 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/09/02/getting-client-isp-with-php/</guid>
      <description>&lt;p&gt;PHP服务器端的程序，只要查询出客户端IP地址归属地以后，就可以在此基础上加以灵活应用。例如，针对来自不同的ISP的访问，返回不同的网页内容。或者根据用户所在的城市，跳转到该城市的地方网站。&lt;/p&gt;

&lt;p&gt;这里是一个简单的区分不同的ISP的小程序。节选部分代码：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>程序查询IP地址归属地的方法</title>
      <link>https://racksam.github.io/2013/09/01/getting-ip-location-with-php/</link>
      <pubDate>Sun, 01 Sep 2013 10:39:07 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/09/01/getting-ip-location-with-php/</guid>
      <description>&lt;p&gt;程序中查询一个IP地址的归属地信息，方法有很多种。概括起来有两类：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;调用某些网站提供的web api接口&lt;/p&gt;

&lt;p&gt;好处是显而易见的，使用便捷，开发成本低，自己不需要维护IP地址信息库。坏处也很明显，受制于人，服务说停就停。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自己编程，查询本地的IP地址信息库&lt;/p&gt;

&lt;p&gt;这种方式完全自主，使用起来没有任何限制。不过需要自己维护IP地址信息库，起码每年更新几次还是有必要的。国内最常用的IP地址信息库就是纯真IP地址信息库了。&lt;/p&gt;

&lt;p&gt;下载网站1：&lt;a href=&#34;http://www.cz88.net&#34;&gt;http://www.cz88.net&lt;/a&gt; 下载网站2：&lt;a href=&#34;http://www.crsky.com/soft/2611.html&#34;&gt;http://www.crsky.com/soft/2611.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;需要注意的是，虽然php可以直接访问qqwry.dat文件进行查询，但是如果查询比较频繁的话，建议还是采用使用C编写成的qqwry.so这样的php扩展模块效率更高。在Linux下很容易进行安装。具体可以参照&lt;a href=&#34;http://www.open-open.com/lib/view/open1334717267889.html&#34;&gt;http://www.open-open.com/lib/view/open1334717267889.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;还有一种做法是使用数据库维护一个IP地址信息库。难点主要是如果拿到一份正确的数据库（去淘宝上买？哪里有官方的？）以及从哪里获取IP信息的更新。&lt;/p&gt;

&lt;p&gt;对于小规模应用，最便捷的做法显然是调用新浪，淘宝等现成的接口。大不了把几个接口都写到程序里，一个接口失败了，就尝试调用另外一个接口，这样应该能大大增强程序的可靠性。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP获取客户端真实IP地址的方法</title>
      <link>https://racksam.github.io/2013/08/10/getting-client-real-ip-address-in-php-request/</link>
      <pubDate>Sat, 10 Aug 2013 10:06:57 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/08/10/getting-client-real-ip-address-in-php-request/</guid>
      <description>考虑到用户的浏览器访问网站可能会使用代理，服务器端的php代码必须使用多种判断，才能获取用户的真实IP地址。 &amp;lt;?php function getClientIp(){ $onlineip=&#39;&#39;; if(getenv(&#39;HTTP_CLIENT_IP&#39;)&amp;amp;&amp;amp;strcasecmp(getenv(&#39;HTTP_CLIENT_IP&#39;),&#39;unknown&#39;)){ $onlineip=getenv(&#39;HTTP_CLIENT_IP&#39;); }elseif(getenv(&#39;HTTP_X_FORWARDED_FOR&#39;)&amp;amp;&amp;amp;strcasecmp(getenv(&#39;HTTP_X_FORWARDED_FOR&#39;),&#39;unknown&#39;)){ $onlineip=getenv(&#39;HTTP_X_FORWARDED_FOR&#39;); }elseif(getenv(&#39;REMOTE_ADDR&#39;)&amp;amp;&amp;amp;strcasecmp(getenv(&#39;REMOTE_ADDR&#39;),&#39;unknown&#39;)){ $onlineip=getenv(&#39;REMOTE_ADDR&#39;); }elseif(isset($_SERVER[&#39;REMOTE_ADDR&#39;])&amp;amp;&amp;amp;$_SERVER[&#39;REMOTE_ADDR&#39;]&amp;amp;&amp;amp;strcasecmp($_SERVER[&#39;REMOTE_ADDR&#39;],&#39;unknown&#39;)){ $onlineip=$_SERVER[&#39;REMOTE_ADDR&#39;]; } return $onlineip; }</description>
    </item>
    
    <item>
      <title>php中如何判断一个IP地址是否属于某个网络地址段</title>
      <link>https://racksam.github.io/2013/08/09/good-php-script-to-judge-ip-range/</link>
      <pubDate>Fri, 09 Aug 2013 10:35:26 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/08/09/good-php-script-to-judge-ip-range/</guid>
      <description>这个问题困扰我很久了。很多人的做法是使用正则文字验证开头文字是否匹配。但是这种方式有很大的局限性，只能判断类似192.168.1.9是否属于</description>
    </item>
    
    <item>
      <title>PHP调用Linux Ping</title>
      <link>https://racksam.github.io/2013/08/06/using-ping-with-php/</link>
      <pubDate>Tue, 06 Aug 2013 10:06:57 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/08/06/using-ping-with-php/</guid>
      <description>PHP中实现网络ping的功能，可以直接调用操作系统的ping命令。例如在Linux下，可以这样实现： &amp;lt;?php // 参照ping命令的参数 exec(&amp;quot;ping -c 2 www.tudaxia.com&amp;quot;, $output, $result);</description>
    </item>
    
    <item>
      <title>DNSPod API</title>
      <link>https://racksam.github.io/2013/08/03/dnspod-api-resource/</link>
      <pubDate>Sat, 03 Aug 2013 10:06:57 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/08/03/dnspod-api-resource/</guid>
      <description>发现dnspod.cn的API越来越丰富了，除了官方的API，第三方封装的各种语言的库函数也很丰富。灵活应用这些API，可以很方便的开发出来</description>
    </item>
    
    <item>
      <title>Whmcs 密码api</title>
      <link>https://racksam.github.io/2013/08/01/decode-password-with-whmcs-api/</link>
      <pubDate>Thu, 01 Aug 2013 10:06:57 +0000</pubDate>
      
      <guid>https://racksam.github.io/2013/08/01/decode-password-with-whmcs-api/</guid>
      <description>&lt;p&gt;Whmcs是一款优秀的主机在线销售系统。虽然是使用php开发的，但是由于是商业软件，它使用&lt;a href=&#34;http://www.ioncube.com/&#34;&gt;ioncube&lt;/a&gt;对所有的php代码进行了加密。这样一来就无法在原有的代码基础上直接进行二次开发。&lt;/p&gt;

&lt;p&gt;不过Whmcs开发人员为开发者预留了大量的API接口，可以很方便的进行功能扩展和定制&lt;a href=&#34;http://docs.whmcs.com/API&#34;&gt;http://docs.whmcs.com/API&lt;/a&gt;。这些接口可以通过两种方式进行调用。一种是php程序在whmcs目录内直接传递参数来调用localAPI函数，适宜于为whmcs开发各种模块或者hook；另外一种是通过web service方式，使用http接口来传递参数调用&lt;code&gt;http://yourdomain(host)/includes/api.php&lt;/code&gt;，这种方式适宜于不同系统之间的集成。如果使用web service接口，还有一个好处就是可以使用各种开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>error: MSVCP90.dll: No such file or directory</title>
      <link>https://racksam.github.io/2012/09/26/py2exe-error-of-msvcp90-dll/</link>
      <pubDate>Wed, 26 Sep 2012 09:58:58 +0000</pubDate>
      
      <guid>https://racksam.github.io/2012/09/26/py2exe-error-of-msvcp90-dll/</guid>
      <description>&lt;p&gt;Windows下使用py2exe编译wxPython程序时，碰到报错&lt;code&gt;error: MSVCP90.dll: No such file or directory&lt;/code&gt;，到万能的Google上一查，解决方法是在py2exe的编译选项中增加&lt;code&gt;&amp;quot;dll_excludes&amp;quot;: [&amp;quot;MSVCP90.dll&amp;quot;]&lt;/code&gt;，代码如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ShellScript读写MySQL数据库</title>
      <link>https://racksam.github.io/2012/09/25/linux-commands-to-use-mysql/</link>
      <pubDate>Tue, 25 Sep 2012 09:49:14 +0000</pubDate>
      
      <guid>https://racksam.github.io/2012/09/25/linux-commands-to-use-mysql/</guid>
      <description>Linux使用shell命令，也可以查询MySQL数据库。某些时候比用php、perl等语言还要方便，在编写一些shell脚本程序时非常有用</description>
    </item>
    
    <item>
      <title>Linux下查看硬件信息</title>
      <link>https://racksam.github.io/2012/09/24/linux-command-to-check-hardware-information/</link>
      <pubDate>Mon, 24 Sep 2012 09:49:14 +0000</pubDate>
      
      <guid>https://racksam.github.io/2012/09/24/linux-command-to-check-hardware-information/</guid>
      <description>Linux下多数硬件信息都可以通过命令行查看。 尤其对于远程管理服务器特别有用，例如查询Dell服务器的序列号。 #查看产品信息： dmidecode | grep &amp;quot;Product&amp;quot; #查看</description>
    </item>
    
    <item>
      <title>Linux删除某日以前旧文件的命令</title>
      <link>https://racksam.github.io/2012/09/23/linux-command-to-delete-the-files-before-n-days-ago/</link>
      <pubDate>Sun, 23 Sep 2012 09:49:14 +0000</pubDate>
      
      <guid>https://racksam.github.io/2012/09/23/linux-command-to-delete-the-files-before-n-days-ago/</guid>
      <description>删除某日以前的且文件名满足一定条件的旧文件 #在使用-exec参数时，必须以“\;”结尾,否则命令将无法执行 # #删除10天以前文件结尾为.lo</description>
    </item>
    
    <item>
      <title>Linux下使用wondershaper限制网速</title>
      <link>https://racksam.github.io/2012/09/22/use-wondershaper-to-limit-network-connection-speed/</link>
      <pubDate>Sat, 22 Sep 2012 09:41:23 +0000</pubDate>
      
      <guid>https://racksam.github.io/2012/09/22/use-wondershaper-to-limit-network-connection-speed/</guid>
      <description>&lt;p&gt;Linux下主要是使用tc工具来进行限速。不过tc用起来真是不容易，参数非常多且很难懂，要想用好的话很耗时间。&lt;/p&gt;

&lt;p&gt;推荐一个老外写的脚本wondershaper，简单易用，也是很好的tc参考样例。
虽然脚本早就不更新了，但是在CentOS6.2 64bit下验证仍可以用。
网址：&lt;a href=&#34;http://lartc.org/wondershaper/&#34;&gt;http://lartc.org/wondershaper/&lt;/a&gt;
下载：&lt;a href=&#34;http://lartc.org/wondershaper/wondershaper-1.1a.tar.gz&#34;&gt;http://lartc.org/wondershaper/wondershaper-1.1a.tar.gz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压后，编辑wshaper脚本文件，修改开头的几个限速参数：
下载，上传，网卡。速度的单位是kpbs。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>py2exe编译后的python程序中，取得当前所在目录的方法</title>
      <link>https://racksam.github.io/2012/09/21/py2exe-get-current-directory/</link>
      <pubDate>Fri, 21 Sep 2012 21:43:08 +0000</pubDate>
      
      <guid>https://racksam.github.io/2012/09/21/py2exe-get-current-directory/</guid>
      <description>python脚本程序中如果需要获取程序自身所在的目录，一般会使用以下方法： os.path.dirname(__file__) __file__变量是Python内置的全局变量，代表当前程序文</description>
    </item>
    
    <item>
      <title>将Python脚本程序发布成一个exe可执行文件</title>
      <link>https://racksam.github.io/2012/09/20/compile-a-python-script-to-exe/</link>
      <pubDate>Thu, 20 Sep 2012 21:43:08 +0000</pubDate>
      
      <guid>https://racksam.github.io/2012/09/20/compile-a-python-script-to-exe/</guid>
      <description>&lt;h2 id=&#34;目的&#34;&gt;目的&lt;/h2&gt;

&lt;p&gt;Python脚本如果需要发布给Windows客户运行，可以使用py2exe来编译成exe可执行文件,
这样用户就不用安装Python运行环境。
顺便还保护了源代码。（不过要注意，还是可以反编译的）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下wget下载整个FTP目录</title>
      <link>https://racksam.github.io/2012/09/01/using-wget-to-recursively-download-whole-ftp-directories/</link>
      <pubDate>Sat, 01 Sep 2012 21:43:08 +0000</pubDate>
      
      <guid>https://racksam.github.io/2012/09/01/using-wget-to-recursively-download-whole-ftp-directories/</guid>
      <description>Linux下可以使用以下命令，下载远端FTP目录下所有的文件，递归所有子目录。对服务器迁移很有用。 wget -nH -m --ftp-user=your_username --ftp-password=your_password ftp://your_ftp_host/* 解释： -nH：不创建以主机名命</description>
    </item>
    
    <item>
      <title>rsync服务器配置</title>
      <link>https://racksam.github.io/2012/03/21/running-rsync-as-a-daemon/</link>
      <pubDate>Wed, 21 Mar 2012 21:43:08 +0000</pubDate>
      
      <guid>https://racksam.github.io/2012/03/21/running-rsync-as-a-daemon/</guid>
      <description>&lt;p&gt;rsync是Linux下小巧却非常高效的文件同步工具，常被用于文件备份。rsync既可以作为单个命令在本地两个目录之间进行文件同步，也可以应用于CS架构：即在服务器上用rsync的守候进程模式启动一个rsync服务，而其它的客户端主机使用rsync命令，与rsync服务器之间进行同步。&lt;/p&gt;

&lt;p&gt;虽然也可以通过samba或者nfs等服务将其它Linux需要同步的目录mount到本地的一个目录，然后使用rsync命令进行本地目录间的同步，但是从效率以及管理方便程度方面考虑，兔大侠并不推荐这种方式。如果是主机之间的同步，首选还是应该是用rsync的守候进程模式。&lt;/p&gt;

&lt;p&gt;rsync可以通过yum install rsync或者源代码编译方式来进行安装。不论哪种方式，都只是安装在系统上安装了rsync命令，服务器模式的相关配置只能自己动手。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRT使用3G上网卡</title>
      <link>https://racksam.github.io/2011/12/09/connect-3g-on-dd-wrt/</link>
      <pubDate>Fri, 09 Dec 2011 21:43:08 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/12/09/connect-3g-on-dd-wrt/</guid>
      <description>&lt;p&gt;具有USB接口，并能刷成DD-WRT无线路由器，一般都能支持使用3G上网卡上网。设置方法是在Web管理界面上[设置]-&amp;gt;[基本设置]界面上，WAN的连接方式选择”3G/UMTS”,然后输入拨号的用户名及密码，如下图所示。
&lt;img src=&#34;https://racksam.github.io/attachments/connect-3G-on-dd-wrt/dd-wrt-3g-chinatel.png&#34; alt=&#34;连接3G上网卡&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用DD-WRT无线路由器增强无线信号（同一网段）</title>
      <link>https://racksam.github.io/2011/12/02/using-dd-wrt-wireless-repeater-bridge/</link>
      <pubDate>Fri, 02 Dec 2011 21:43:08 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/12/02/using-dd-wrt-wireless-repeater-bridge/</guid>
      <description>&lt;p&gt;上次写了一篇如何使用DD-WRT无线中继的文章。使用这种方式的话，扩展后的无线网络使用的是另外一个子网网段。如果想扩展无线网络的同时，还是想使用原有无线路由器的内网网段的话，就必须选择“中继桥接”的方式了。具体设置过程如下：&lt;/p&gt;

&lt;h2 id=&#34;1-首先需要做好规划&#34;&gt;1. 首先需要做好规划&lt;/h2&gt;

&lt;p&gt;假设主无线路由器的配置信息如下（举例）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;路由器内网地址：192.168.0.1
内网地址段：192.168.0.1/24
SSID: MasterWiFi
密码：123456
加密方法：WPA Personal TKIP

规划新的无线路由器上配置（举例）：
路由器内网地址：192.168.0.2
内网地址段：（中继桥接模式下，自动变为不可配置）
SSID: &amp;lt;strong&amp;gt;ChildWiFi&amp;lt;/strong&amp;gt;
密码：123456
加密方法：WPA Personal TKIP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用DD-WRT无线路由器增强无线信号（使用新网段）</title>
      <link>https://racksam.github.io/2011/11/21/using-dd-wrt-wireless-repeater/</link>
      <pubDate>Mon, 21 Nov 2011 21:43:08 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/11/21/using-dd-wrt-wireless-repeater/</guid>
      <description>&lt;p&gt;当电脑距离无线路由器较远或者被多道墙隔着，无线信号会衰减得很弱以至于没法正常上网。假如直接拉一根网线不现实的话，那么可以在中间位置添置一台支持中继功能的无线路由器来中继信号（类似接力赛），使网络能够覆盖更大的区域。无线路由器刷dd-wrt后，能很好的支持无线中继功能。&lt;/p&gt;

&lt;h3 id=&#34;一-主力无线路由器-接宽带猫的那一台-的设置方法&#34;&gt;一、主力无线路由器（接宽带猫的那一台）的设置方法&lt;/h3&gt;

&lt;p&gt;主力无线路由器没有什么品牌及型号方面的要求，配置方法也没有什么特别之处。只要配置好基本网络设置，以及无线SSID及密码，用笔记本电脑测试能正常无线上网的话，就算配置成功了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这里假设主无线路由器的配置信息如下：
SSID: MasterWiFi
密码：123456
加密方法：WPA Personal TKIP
内网地址段：192.168.0.1/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRT的六种无线模式</title>
      <link>https://racksam.github.io/2011/11/20/introduce-dd-wrt-wireless-modes/</link>
      <pubDate>Sun, 20 Nov 2011 21:43:08 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/11/20/introduce-dd-wrt-wireless-modes/</guid>
      <description>&lt;p&gt;为了设置无线路由器的中继功能，兔哥仔细学习了一下dd-wrt的六种无线模式，再也不会稀里糊涂了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://racksam.github.io/attachments/introduce-dd-wrt-wireless-modes/wifi_mode.png&#34; alt=&#34;DD-WRT的六种无线模式&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;访问点 (AP)&lt;/p&gt;

&lt;p&gt;该模式下路由器的无线网卡就像一个”无线HUB”，负责建立无线路由器和电脑之间的数据链路（相当于无形的网线）。正常情况下，家用的无线路由器的无线连接都默认工作在此模式下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>快速克隆MySQL数据库的方法</title>
      <link>https://racksam.github.io/2011/11/03/how-to-clone-mysql-database-on-linux/</link>
      <pubDate>Thu, 03 Nov 2011 21:33:53 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/11/03/how-to-clone-mysql-database-on-linux/</guid>
      <description>某些时候，例如为了搭建一个测试环境，或者克隆一个网站，需要复制一个已存在的mysql数据库。使用以下方法，可以非常简单地实现。 假设已经存在的</description>
    </item>
    
    <item>
      <title>几个非常好用的WordPress插件</title>
      <link>https://racksam.github.io/2011/11/02/good-plugins-for-wordpress/</link>
      <pubDate>Wed, 02 Nov 2011 21:04:34 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/11/02/good-plugins-for-wordpress/</guid>
      <description>&lt;p&gt;无论是搭建中小企业的网站，还是创建个人博客，WordPress都可以轻松胜任。除了其本身优秀的设计，无数各种各样为WordPress编写的扩展插件也是大家选择用它的重要原因。&lt;/p&gt;

&lt;p&gt;最近为了搭建网站，兔哥花了不少时间，仔细挑选了几个功能扩展、SEO、安全增强方面的WordPress插件。功能强大，超级好用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS下安装AWStats日志分析软件</title>
      <link>https://racksam.github.io/2011/11/01/how-to-install-awstats-on-linux/</link>
      <pubDate>Tue, 01 Nov 2011 21:04:34 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/11/01/how-to-install-awstats-on-linux/</guid>
      <description>&lt;p&gt;AWStats是一个Perl语言写的日志分析工具，最常见的是应用于Web日志分析。类似的软件还有更老牌的Webalizer，不过这几年AWStats似乎更强势一些。&lt;/p&gt;

&lt;p&gt;虽然Google Analytics这样的网站访问分析服务可以非常有效地帮助站长掌握网站访问量，但是它的局限性也是显而易见的：由于Google Analytics这类服务的原理是客户在浏览页面的同时，触发页面里埋入的js代码来更新服务器上的计数程序，因此那些没有埋入该js计数代码的页面或者js没法执行的请求（如来自wget的请求、爬虫等），都无法被记录下来。这种依赖于客户行为的页面计数，更适合市场营销人员进行网站访问量分析。&lt;/p&gt;

&lt;p&gt;而AWStats的原理是读取并计算web服务器所产生的access log文件，因此能够对所有的请求记录做彻底的分析。包括所有的文件下载，各类爬虫的访问都能毫无遗漏的被记录下来。如果要进行网站压力分析，网站调优，SEO分析等技术性的工作，AWStats之类的日志分析软件是不可缺少的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS 5.7 完美安装 Oracle 10g</title>
      <link>https://racksam.github.io/2011/10/09/oracle-db-10g-installation-on-centos-5/</link>
      <pubDate>Sun, 09 Oct 2011 18:53:24 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/10/09/oracle-db-10g-installation-on-centos-5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>小公司慎用RedHat集群</title>
      <link>https://racksam.github.io/2011/09/02/cluster-troubles-for-small-company/</link>
      <pubDate>Fri, 02 Sep 2011 19:52:53 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/09/02/cluster-troubles-for-small-company/</guid>
      <description>&lt;p&gt;“小公司，别折腾什么集群了。。” –by 兔大侠&lt;/p&gt;

&lt;p&gt;“集群就意味用高额的软硬件投入换来高可靠性”。随便到网上一搜，基本上都是这样的观点。很多系统管理员也理所当然的将集群等同于高可靠性。我一直以来也是这样被洗脑了，直到某个周日的夜里碰到一个严重的集群问题才让我清醒一些。那次差点就酿成核心数据的灾难性事故，也差点让我心脏崩溃。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS下配置vncserver</title>
      <link>https://racksam.github.io/2011/06/10/centos-vncserver-setup/</link>
      <pubDate>Fri, 10 Jun 2011 19:43:54 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/06/10/centos-vncserver-setup/</guid>
      <description>&lt;p&gt;多数情况下远程管理Linux并不需要X-window界面，但是不排除也有特殊情况下需要登录到远程服务器的图形化界面。例如远程安装Oracle数据库服务器。&lt;/p&gt;

&lt;p&gt;Linux下vncserver提供了一个很好的接入图形化界面的方式。它以服务进程的方式存在，因此服务器是否是以level5启动的，并不会影响vnc的使用。当然，前提是linux服务器上安装了必要的x-window及gnome或kde等图形化界面所需要软件包。&lt;/p&gt;

&lt;p&gt;安装配置VNC服务器及客户端的步骤如下：
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 虚拟机 扩展空逻辑卷间（LVM）</title>
      <link>https://racksam.github.io/2011/06/09/extend-linux-lvm/</link>
      <pubDate>Thu, 09 Jun 2011 18:53:24 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/06/09/extend-linux-lvm/</guid>
      <description>在VMware安装的虚拟机Linux，扩展LVM的操作过程如下。 虚拟机停机状态下，编辑虚拟机的硬盘设置，通过修改参数把原来硬盘加大 重启，进入</description>
    </item>
    
    <item>
      <title>Linux下备份MySQL所有数据库的脚本</title>
      <link>https://racksam.github.io/2011/06/09/mysql-backup-shell-script/</link>
      <pubDate>Thu, 09 Jun 2011 18:07:42 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/06/09/mysql-backup-shell-script/</guid>
      <description>&lt;p&gt;该脚本的目的是备份MySQL下除系统信息以外的所有的用户创建的数据库。每个数据库单独一个gz文件存放于指定目录里。执行备份操作完毕以后，删除15日以前创建的备份文件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL导入导出的简单命令</title>
      <link>https://racksam.github.io/2011/06/09/import-and-export-mysql-database/</link>
      <pubDate>Thu, 09 Jun 2011 17:45:15 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/06/09/import-and-export-mysql-database/</guid>
      <description>&lt;p&gt;备忘一下常用的MySQL导入导出命令。使用mysqldump工具及mysql终端里的source命令。&lt;/p&gt;

&lt;h3 id=&#34;导出整个数据库&#34;&gt;导出整个数据库&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$mysqldump -u 用户名 -p 数据库名 &amp;gt; 导出的文件名
$mysqldump -u wcnc -p smgp_apps_wcnc &amp;gt; wcnc.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL最大连接数调整</title>
      <link>https://racksam.github.io/2011/06/09/increase-maximum-connections-of-mysql/</link>
      <pubDate>Thu, 09 Jun 2011 17:17:15 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/06/09/increase-maximum-connections-of-mysql/</guid>
      <description>&lt;p&gt;CentOS默认安装MySQL的路径&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配置文件：/etc/my.cnf&lt;/li&gt;
&lt;li&gt;在配置文件中，指定了数据的存储路径。一般默认为: datadir=/var/lib/mysql&lt;/li&gt;
&lt;li&gt;默认日志文件: /var/log/mysqld.log
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mysql性能调优&#34;&gt;MySQL性能调优&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看MySQL版本等信息&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL数据库创建及帐号管理</title>
      <link>https://racksam.github.io/2011/06/08/create-mysql-database-and-users/</link>
      <pubDate>Wed, 08 Jun 2011 14:50:27 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/06/08/create-mysql-database-and-users/</guid>
      <description>&lt;p&gt;整理了一下菜鸟级MySQL常用操作。主要是数据库创建，帐号创建及修改密码等。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下java程序启动脚本（可做开机自启动Service脚本）</title>
      <link>https://racksam.github.io/2011/06/08/linux-shell-script-run-java-service/</link>
      <pubDate>Wed, 08 Jun 2011 14:22:13 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/06/08/linux-shell-script-run-java-service/</guid>
      <description>Java项目开发过程中经常会碰到将Java应用程序布置到Linux下的需求，很多时候还有系统开机自动启动的要求。这里我整理了一个简单明了的版</description>
    </item>
    
    <item>
      <title>让MySQL不区分大小写表名</title>
      <link>https://racksam.github.io/2011/06/07/how-to-disable-table-name-case-sensitive/</link>
      <pubDate>Tue, 07 Jun 2011 13:10:23 +0000</pubDate>
      
      <guid>https://racksam.github.io/2011/06/07/how-to-disable-table-name-case-sensitive/</guid>
      <description>MySQL默认是区别大小表名的，这与很多习惯于其它数据库的程序员很不适应。如果想关闭大小写敏感，可以采用以下步骤。 在CentOS中的my.c</description>
    </item>
    
  </channel>
</rss>